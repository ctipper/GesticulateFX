/*
 *  SVGWorker.java
 * 
 *  Created on Nov 8, 2012 8:31:03 PM
 * 
 */
package net.perspective.draw.workers;

import java.io.*;
import javafx.concurrent.Task;
import javax.inject.Inject;
import net.perspective.draw.CanvasView;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.CachedImageHandlerBase64Encoder;
import org.apache.batik.svggen.GenericImageHandler;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;

/**
 *
 * @author ctipper
 */

public class SVGWorker extends Task {

    @Inject private CanvasView view;
    private File file;

    private static final Logger logger = LoggerFactory.getLogger(SVGWorker.class.getName());

    /**
     * Creates a new instance of
     * <code>SVGWorker</code>
     */
    @Inject
    public SVGWorker() {
    }

    public void setFile(File file) {
        this.file = file;
    }

    @Override
    protected Object call() throws Exception {
        logger.info("SVG export started...");
        return new Serialiser();
    }

    @Override
    public void done() {
        logger.info("SVG export completed.");
    }

    final class Serialiser {

        Serialiser() {
            logger.info("SVG export initialised.");
            this.make();
        }

        public void make() {
            try {
                // Get a DOMImplementation.
                DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();

                // Create an instance of org.w3c.dom.Document.
                String svgNS = "http://www.w3.org/2000/svg";
                org.w3c.dom.Document document = domImpl.createDocument(svgNS, "svg", null);

                SVGGeneratorContext cxt = SVGGeneratorContext.createDefault(document);
                cxt.setComment("Generated by Gesticulate with Batik SVG Generator");

                // Reuse our embedded base64-encoded image data.
                GenericImageHandler ihandler = new CachedImageHandlerBase64Encoder();
                cxt.setGenericImageHandler(ihandler);

                // Create an instance of the SVG Generator.
                SVGGraphics2D g2 = new SVGGraphics2D(cxt, false);

                // Ask to render into the SVG Graphics2D implementation.
                view.getDrawings().stream().forEach((item) -> {
                    item.draw(g2);
                });

                boolean useCSS = true; // we want to use CSS style attributes
                try (Writer out = new OutputStreamWriter(new FileOutputStream(file), "UTF-8")) {
                    g2.stream(out, useCSS);
                    g2.dispose();
                } catch (IOException e) {
                    logger.warn(e.getMessage());
                }
            } catch (DOMException e) {
                logger.warn(e.getMessage());
            }
        }
    }
}
