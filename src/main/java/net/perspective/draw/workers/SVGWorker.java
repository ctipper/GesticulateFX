/*
 *  SVGWorker.java
 * 
 *  Created on Nov 8, 2012 8:31:03 PM
 * 
 */
package net.perspective.draw.workers;

import java.io.*;
import java.util.logging.Logger;
import javax.inject.Inject;
//import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import net.perspective.draw.DrawingArea;
import net.perspective.draw.Gesticulate;
import net.perspective.draw.enums.Media;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.*;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;

/**
 *
 * @author ctipper
 */

public class SVGWorker extends SwingWorker {

    @Inject private DrawingArea drawarea;
    protected Gesticulate application;
    protected File file;
    
    private static final Logger logger = Logger.getLogger(SVGWorker.class.getName());

    /**
     * Creates a new instance of
     * <code>SVGWorker</code>
     */
    public SVGWorker(Gesticulate app, File f) {
        file = f;
        application = app;
    }

    protected Object doInBackground() {
        logger.info("SVG export started...");
        return new Serialiser();
    }

    @Override
    public void done() {
        logger.info("SVG export completed.");
        //ensureEventThread();
        //application.setStatus("Exported to SVG.");
        //int max = application.getProgress().getMaximum();
        //application.getProgress().setValue(max);
        //application.getProgress().setIndeterminate(false);
        //application.getProgress().setVisible(false);
    }

//    private void ensureEventThread() {
//        if (SwingUtilities.isEventDispatchThread()) {
//            return;
//        }
//        throw new RuntimeException("Not Event Dispatch Thread");
//    }

    final class Serialiser {

        Serialiser() {
            logger.info("SVG export initialised.");
            this.make();
        }

        public void make() {
            try {
                // Get a DOMImplementation.
                DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();

                // Create an instance of org.w3c.dom.Document.
                String svgNS = "http://www.w3.org/2000/svg";
                org.w3c.dom.Document document = domImpl.createDocument(svgNS, "svg", null);

                SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);
                ctx.setComment("Generated by Gesticulate with Batik SVG Generator");

                // Reuse our embedded base64-encoded image data.
                GenericImageHandler ihandler = new CachedImageHandlerBase64Encoder();
                ctx.setGenericImageHandler(ihandler);

                // Create an instance of the SVG Generator.
                SVGGraphics2D g2 = new SVGGraphics2D(ctx, false);

                // Ask to render into the SVG Graphics2D implementation.
                drawarea.drawCanvas(g2, Media.PRINT);

                boolean useCSS = true; // we want to use CSS style attributes
                try (Writer out = new OutputStreamWriter(new FileOutputStream(file), "UTF-8")) {
                    g2.stream(out, useCSS);
                    g2.dispose();
                } catch (IOException e) {
                    logger.warning(e.getMessage());
                }
            } catch (DOMException e) {
                logger.warning(e.getMessage());
            }
        }
    }
}
