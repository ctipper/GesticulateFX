/*
 *  SVGWorker.java
 * 
 *  Created on Nov 8, 2012 8:31:03 PM
 * 
 */

/**
 * Copyright (c) 2022 Christopher Tipper
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.perspective.draw.workers;

import java.io.*;
import java.util.concurrent.CompletableFuture;
import javafx.application.Platform;
import javafx.concurrent.Task;
import javax.inject.Inject;
import net.perspective.draw.ApplicationController;
import net.perspective.draw.CanvasView;
import net.perspective.draw.ShareUtils;
import net.perspective.draw.util.CanvasPoint;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.CachedImageHandlerBase64Encoder;
import org.apache.batik.svggen.GenericImageHandler;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Element;

/**
 * 
 * @author ctipper
 */

public class SVGWorker extends Task<Object> {

    @Inject private CanvasView view;
    @Inject private ApplicationController controller;
    @Inject private ShareUtils share;
    private File file;
    private double margin;

    private static final Logger logger = LoggerFactory.getLogger(SVGWorker.class.getName());

    @Inject
    public SVGWorker() {
        this.margin = 0.0;
    }

    public void setFile(File file) {
        this.file = file;
    }

    public void setMargin(double margin) {
        this.margin = margin;
    }

    @Override
    protected Object call() throws Exception {
        logger.info("SVG export started...");
        return new Serialiser();
    }

    @Override
    public void done() {
        logger.info("SVG export completed.");
        CompletableFuture.runAsync(() -> {
            try {
                // introduce a minimum visible interval
                Thread.sleep(300);
            } catch (InterruptedException e) {
            }
        }, share.executor).thenRun(() -> {
            Platform.runLater(() -> {
                controller.getProgressVisibleProperty().setValue(Boolean.FALSE);
                controller.setStatusMessage("Exported to SVG");
            });
        });
    }

    final class Serialiser {

        Serialiser() {
            logger.info("SVG export initialised.");
            this.make();
        }

        public void make() {
            // Calculate drawing bounds
            final CanvasPoint[] bounds = view.getBounds();
            CanvasPoint start = bounds[0].shifted(-margin, -margin).floor();
            CanvasPoint end = bounds[1].shifted(margin, margin);

            try {
                // Get a DOMImplementation.
                DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();

                // Create an instance of org.w3c.dom.Document.
                String svgNS = "http://www.w3.org/2000/svg";
                org.w3c.dom.Document document = domImpl.createDocument(svgNS, "svg", null);

                SVGGeneratorContext cxt = SVGGeneratorContext.createDefault(document);
                cxt.setComment("Generated by Gesticulate with Batik SVG Generator");

                // Reuse our embedded base64-encoded image data.
                GenericImageHandler ihandler = new CachedImageHandlerBase64Encoder();
                cxt.setGenericImageHandler(ihandler);

                // Create an instance of the SVG Generator.
                SVGGraphics2D g2 = new SVGGraphics2D(cxt, false);

                // Only stream effective viewBox
                int width = (int) Math.ceil(end.x - start.x);
                int height = (int) Math.ceil(end.y - start.y);
                g2.transform(java.awt.geom.AffineTransform.getTranslateInstance(-start.x, -start.y));

                // Ask to render into the SVG Graphics2D implementation.
                view.getDrawings().stream().forEach((item) -> {
                    item.draw(g2);
                });

                /**
                 * Define viewBox manually
                 * 
                 * setSVGCanvasSize has limitations in the output
                 */
                Element svgRoot = g2.getRoot();
                svgRoot.setAttributeNS(null, "x", "0px");
                svgRoot.setAttributeNS(null, "y", "0px");
                svgRoot.setAttributeNS(null, "width", "100%");
                String viewBox = "0 0 " + width + " " + height; 
                svgRoot.setAttributeNS(null, "viewBox", viewBox);

                boolean useCSS = true; // we want to use CSS style attributes
                try (Writer out = new OutputStreamWriter(new FileOutputStream(file), "UTF-8")) {
                    g2.stream(svgRoot, out, useCSS, false);
                    g2.dispose();
                } catch (IOException e) {
                    logger.warn(e.getMessage());
                }
            } catch (DOMException e) {
                logger.warn(e.getMessage());
            }
        }
    }

}
